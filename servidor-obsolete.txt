#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>



int main(int argc, char *argv[])
{
	
	int sock_conn, sock_listen, ret;
	struct sockaddr_in serv_adr;
	char peticion[512];
	char respuesta[512];
	// INICIALITZACIONS
	// Obrim el socket
	if ((sock_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		printf("Error creant socket");
	// Fem el bind al port
	
	
	memset(&serv_adr, 0, sizeof(serv_adr));// inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	
	// asocia el socket a cualquiera de las IP de la m?quina. 
	//htonl formatea el numero que recibe al formato necesario
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
	// establecemos el puerto de escucha
	serv_adr.sin_port = htons(9000);
	if (bind(sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0)
		printf ("Error al bind");
	
	if (listen(sock_listen, 3) < 0)
		printf("Error en el Listen");
	
	int i;
	// Bucle infinito
	for (;;){
		printf ("Escuchando\n");
		
		sock_conn = accept(sock_listen, NULL, NULL);
		printf ("He recibido conexion\n");
		//sock_conn es el socket que usaremos para este cliente
		
		int terminar =0;
		// Entramos en un bucle para atender todas las peticiones de este cliente
		//hasta que se desconecte
		while (terminar ==0)
		{
			// Ahora recibimos la petici?n
			ret=read(sock_conn,peticion, sizeof(peticion));
			printf ("Recibido\n");
			
			// Tenemos que a?adirle la marca de fin de string 
			// para que no escriba lo que hay despues en el buffer
			peticion[ret]='\0';
			
			
			printf ("Peticion: %s\n",peticion);
			
			// vamos a ver que quieren
			char *p = strtok( peticion, "/");
			int codigo =  atoi (p);
			// Ya tenemos el c?digo de la petici?n


int main(int argc, char *argv[])
{
	
	int sock_conn, sock_listen, ret;
	struct sockaddr_in serv_adr;
	char peticion[512];
	char respuesta[512];
	// INICIALITZACIONS
	// Obrim el socket
	if ((sock_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		printf("Error creant socket");
	// Fem el bind al port
	
	
	memset(&serv_adr, 0, sizeof(serv_adr));// inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	
	// asocia el socket a cualquiera de las IP de la m?quina. 
	//htonl formatea el numero que recibe al formato necesario
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
	// establecemos el puerto de escucha
	serv_adr.sin_port = htons(9000);
	if (bind(sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0)
		printf ("Error al bind");
	
	if (listen(sock_listen, 3) < 0)
		printf("Error en el Listen");
	
	int i;
	// Bucle infinito
	for (;;){
		printf ("Escuchando\n");
		
		sock_conn = accept(sock_listen, NULL, NULL);
		printf ("He recibido conexion\n");
		//sock_conn es el socket que usaremos para este cliente
		
		int terminar =0;
		// Entramos en un bucle para atender todas las peticiones de este cliente
		//hasta que se desconecte
		while (terminar ==0)
		{
			// Ahora recibimos la petici?n
			ret=read(sock_conn,peticion, sizeof(peticion));
			printf ("Recibido\n");
			
			// Tenemos que a?adirle la marca de fin de string 
			// para que no escriba lo que hay despues en el buffer
			peticion[ret]='\0';
			
			
			printf ("Peticion: %s\n",peticion);
			
			// vamos a ver que quieren
			char *p = strtok( peticion, "/");
			int codigo =  atoi (p);
			// Ya tenemos el c?digo de la petici?n
			
int main(int argc, char *argv[]) {
	
	return 0;
}
void Numero_de_victorias()
{ MYSQL *conn;
int err;
char nombre[20];
char consulta[300];
// Estructura especial para almacenar resultados de consultas 
MYSQL_RES *resultado;
MYSQL_ROW row;
conn = mysql_init(NULL);
if (conn==NULL) {
	printf ("Error al crear la conexi??n: %u %s\n", 
			mysql_errno(conn), mysql_error(conn));
	exit (1);
}
conn = mysql_real_connect (conn, "localhost","user", "pass", "personas",0, NULL, 0);
if (conn==NULL) {
	printf ("Error al inicializar la conexi??n: %u %s\n", 
			mysql_errno(conn), mysql_error(conn));
	exit (1);
}
// consulta SQL para obtener una tabla con todos los datos
// de la base de datos
err=mysql_query (conn, "SELECT * FROM M07_db2.sql");
if (err!=0) {
	printf ("Error al consultar datos de la base %u %s\n",
			mysql_errno(conn), mysql_error(conn));
	exit (1);
}
//recogemos el resultado de la consulta. El resultado de la
//consulta se devuelve en una variable del tipo puntero a
//MYSQL_RES tal y como hemos declarado anteriormente.
//Se trata de una tabla virtual en memoria que es la copia
//de la tabla real en disco.
	printf("escribe el nombre del jugador que quieras saber su numero de victorias\n");
	scanf("%s",nombre);
	sprintf(consulta,"SELECT COUNT PARTIDA.ID_G FROM (RESUTADOS,PARTIDA,JUGADOR) WHERE PERONA.NOMBRE = '%s' AND PERSONA.ID=RESULTADOS.ID_J AND RESULTADOS.ID_P=PARTIDA.ID_P",nombre);
	err=mysql_query (conn, consulta); 
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	// cerrar la conexion con el servidor MYSQL 
	mysql_close (conn);
	exit(0);
	
}

int main(int argc, char **argv)
{
	MYSQL *conn;
	int err;
	// Estructura especial para almacenar resultados de consultas 
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	int edad;
	char dni[10];
	char consulta [80];
	//Creamos una conexion al servidor MYSQL 
	conn = mysql_init(NULL);
	if (conn==NULL) {
		printf ("Error al crear la conexiￃﾳn: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//inicializar la conexion
	conn = mysql_real_connect (conn, "localhost","user", "pass", "personas",0, NULL, 0);
	if (conn==NULL) {
		printf ("Error al inicializar la conexiￃﾳn: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	// consulta SQL para obtener una tabla con todos los datos
	// de la base de datos
	err=mysql_query (conn, "SELECT * FROM personas");
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//recogemos el resultado de la consulta. El resultado de la
	//consulta se devuelve en una variable del tipo puntero a
	//MYSQL_RES tal y como hemos declarado anteriormente.
	//Se trata de una tabla virtual en memoria que es la copia
	//de la tabla real en disco.
	resultado = mysql_store_result (conn);
	// El resultado es una estructura matricial en memoria
	// en la que cada fila contiene los datos de una persona.
	
	// Ahora obtenemos la primera fila que se almacena en una
	// variable de tipo MYSQL_ROW
	row = mysql_fetch_row (resultado);
	// En una fila hay tantas columnas como datos tiene una
	// persona. En nuestro caso hay tres columnas: dni(row[0]),
	// nombre(row[1]) y edad (row[2]).
	if (row == NULL)
		printf ("No se han obtenido datos en la consulta\n");
	else
		while (row !=NULL) {
			// la columna 2 contiene una palabra que es la edad
			// la convertimos a entero 
			edad = atoi (row[2]);
			// las columnas 0 y 1 contienen DNI y nombre 
			printf ("DNI: %s, nombre: %s, edad: %d\n", row[0], row[1], edad);
			// obtenemos la siguiente fila
			row = mysql_fetch_row (resultado);
	}
		
		
		
		// Ahora vamos a buscar el nombre de la persona cuyo DNI es uno
		// dado por el usuario
		printf ("Dame el DNI de la persona que quieres buscar\n"); 
		scanf ("%s", dni);
		// construimos la consulta SQL
		strcpy (consulta,"SELECT nombre FROM personas WHERE dni = '"); 
		strcat (consulta, dni);
		strcat (consulta,"'");
		// hacemos la consulta 
		err=mysql_query (conn, consulta); 
		if (err!=0) {
			printf ("Error al consultar datos de la base %u %s\n",
					mysql_errno(conn), mysql_error(conn));
			exit (1);
		}
		//recogemos el resultado de la consulta 
resultado = mysql_store_result (conn); 
		row = mysql_fetch_row (resultado);
		if (row == NULL)
			printf ("No se han obtenido datos en la consulta\n");
		else
			// El resultado debe ser una matriz con una sola fila
			// y una columna que contiene el nombre
			printf ("Nombre de la persona: %s\n", row[0] );
		// cerrar la conexion con el servidor MYSQL 
		mysql_close (conn);
		exit(0);
}


int main(int argc, char *argv[]) {
	
	return 0;
}
void Numero_de_victorias()
{ MYSQL *conn;
int err;
char nombre1[20];
char nombre2[20];
char consulta[300];
// Estructura especial para almacenar resultados de consultas 
MYSQL_RES *resultado;
MYSQL_ROW row;
conn = mysql_init(NULL);
if (conn==NULL) {
	printf ("Error al crear la conexi??n: %u %s\n", 
			mysql_errno(conn), mysql_error(conn));
	exit (1);
}
conn = mysql_real_connect (conn, "localhost","user", "pass", "personas",0, NULL, 0);
if (conn==NULL) {
	printf ("Error al inicializar la conexi??n: %u %s\n", 
			mysql_errno(conn), mysql_error(conn));
	exit (1);
}
// consulta SQL para obtener una tabla con todos los datos
// de la base de datos
err=mysql_query (conn, "SELECT * FROM M07_db2.sql");
if (err!=0) {
	printf ("Error al consultar datos de la base %u %s\n",
			mysql_errno(conn), mysql_error(conn));
	exit (1);
}
//recogemos el resultado de la consulta. El resultado de la
//consulta se devuelve en una variable del tipo puntero a
//MYSQL_RES tal y como hemos declarado anteriormente.
//Se trata de una tabla virtual en memoria que es la copia
//de la tabla real en disco.
	printf("Escribe los nombres de los jugadores que quieras saber su numero de partidas jugadas juntos\n");
	scanf("%s %s",nombre1, nombre2);
	sprintf(consulta,"SELECT COUNT PARTIDA.ID FROM (RESUTADOS,PARTIDA,JUGADOR) WHERE PERONA.NOMBRE = '%s' AND PERSONA.NOMBRE = '%s'",nombre1, nombre2);
	err=mysql_query (conn, consulta); 
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	// cerrar la conexion con el servidor MYSQL 
	mysql_close (conn);
	exit(0);
	
}

int main(int argc, char *argv[]) {
	
	return 0;
}


//requiere el ID del Jugador como parámetro
void Tablero_Puntos_Maximos(int id_j)
{ MYSQL *conn;
int err;
char consulta[300];
// Estructura especial para almacenar resultados de consultas 
MYSQL_RES *resultado;
MYSQL_ROW row;
conn = mysql_init(NULL);
if (conn==NULL) {
	printf ("Error al crear la conexi??n: %u %s\n", 
			mysql_errno(conn), mysql_error(conn));
	exit (1);
}
conn = mysql_real_connect (conn, "localhost","user", "pass", "personas",0, NULL, 0);
if (conn==NULL) {
	printf ("Error al inicializar la conexi??n: %u %s\n", 
			mysql_errno(conn), mysql_error(conn));
	exit (1);
}
// consulta SQL para obtener una tabla con todos los datos de la base de datos
err=mysql_query (conn, "SELECT * FROM M07_db2.sql");
if (err!=0) {
	printf ("Error al consultar datos de la base %u %s\n",
			mysql_errno(conn), mysql_error(conn));
	exit (1);
}
/*recogemos el resultado de la consulta. El resultado de la
consulta se devuelve en una variable del tipo puntero a
MYSQL_RES tal y como hemos declarado anteriormente.
Se trata de una tabla virtual en memoria que es la copia
de la tabla real en disco.*/
	printf("Este es el escenario en el que has obtenido más puntos\n");
	sprintf(consulta,"SELECT PARTIDA.TABLERO FROM RESULTADOS,JUGADOR,PARTIDA WHERE JUGADOR.ID = '%d'",id_j);
	strcat(consulta, " AND MAX(RESULTADOS.PUNTOS) AS TableroMaximo");
	err=mysql_query (conn, consulta); 
	if (err!=0) {
		printf ("Error al consultar datos de la base %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	// cerrar la conexion con el servidor MYSQL 
	mysql_close (conn);
	exit(0);
	
}

			if (codigo !=0)
			{
				
				printf ("Respuesta: %s\n", respuesta);
				// Enviamos respuesta
				write (sock_conn,respuesta, strlen(respuesta));
			}
		}
		// Se acabo el servicio para este cliente
		close(sock_conn); 
	}
}
